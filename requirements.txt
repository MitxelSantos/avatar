# Avatar Pipeline - Sistema Profesional de Entrenamiento LoRA
# Dependencias completas para procesamiento facial, metadata MJ y entrenamiento SDXL
# ACTUALIZADO CON SOPORTE COMPLETO PARA ARCHIVOS RAW (.NEF, .CR2, .ARW, .DNG)

# ===== CORE DEPENDENCIES =====
# Python 3.8 - 3.11 required

# Deep Learning Framework
torch>=2.0.0,<2.2.0
torchvision>=0.15.0
torchaudio>=2.0.0
--extra-index-url https://download.pytorch.org/whl/cu118

# Face Detection and Computer Vision
mtcnn>=0.1.1
opencv-python>=4.8.0
tensorflow>=2.10.0,<2.14.0

# Image Processing
Pillow>=9.0.0
numpy>=1.21.0
scikit-image>=0.19.0

# ===== RAW IMAGE PROCESSING =====
# Soporte completo para archivos RAW (.NEF, .CR2, .ARW, .DNG, .RAF, .ORF, .RW2, .PEF)
rawpy>=0.18.0
imageio>=2.22.0
imageio-ffmpeg>=0.4.7

# Procesamiento avanzado de imágenes
colour-science>=0.4.2
exifread>=3.0.0

# ===== DIFFUSION AND LoRA TRAINING =====
# Diffusers ecosystem
diffusers[torch]>=0.21.0
transformers>=4.25.1
accelerate>=0.15.0
safetensors>=0.3.0

# Memory optimization
xformers>=0.0.20
bitsandbytes>=0.37.0

# ===== OPTIMIZERS AND TRAINING =====
# Advanced optimizers
dadaptation>=3.1
prodigyopt>=1.0
lion-pytorch>=0.0.6

# Training utilities
tensorboard>=2.10.0
wandb>=0.13.0
omegaconf>=2.3.0

# ===== DATA PROCESSING =====
# Data analysis and manipulation
pandas>=1.5.0
datasets>=2.8.0

# ===== UTILITIES =====
# File and path handling
pathlib2>=2.3.7; python_version < "3.4"
tqdm>=4.64.0
rich>=12.0.0

# Configuration and serialization
pyyaml>=6.0
toml>=0.10.2
jsonschema>=4.0.0

# ===== UI AND INTERACTION =====
# GUI for file dialogs
tkinter-page>=0.0.1; sys_platform == "win32"

# ===== DEVELOPMENT AND TESTING =====
# Code quality (optional)
pytest>=7.0.0
black>=22.0.0
flake8>=5.0.0
isort>=5.10.0

# ===== PLATFORM-SPECIFIC =====
# Windows specific
pywin32>=304; sys_platform == "win32"
colorama>=0.4.4; sys_platform == "win32"

# ===== KOHYA_SS DEPENDENCIES =====
# Will be installed automatically during setup
# git+https://github.com/kohya-ss/sd-scripts.git

# ===== OPTIONAL PERFORMANCE =====
# ONNX for optimized inference (optional)
onnx>=1.12.0
onnxruntime>=1.13.0

# Triton for optimized kernels (Linux only)
triton>=2.0.0; sys_platform == "linux"

# ===== VERSION CONSTRAINTS =====
# Ensure compatibility
setuptools>=65.0.0
wheel>=0.37.0
pip>=22.0.0

einops
imagesize
voluptuous

# ===== INSTALACIÓN RECOMENDADA =====
# 1. Crear entorno virtual:
#    python -m venv .venv
#    .venv\Scripts\activate  # Windows
#    source .venv/bin/activate  # Linux/macOS
#
# 2. Instalar PyTorch primero:
#    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
#
# 3. Instalar dependencias principales:
#    pip install -r requirements.txt
#
# 4. Para CUDA 12.1, cambiar index URL a:
#    https://download.pytorch.org/whl/cu121
#
# 5. Para CPU-only (no recomendado):
#    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# ===== SOPORTE RAW POR FABRICANTE =====
# rawpy soporta los siguientes formatos:
# - Nikon: .NEF
# - Canon: .CR2, .CR3
# - Sony: .ARW
# - Adobe: .DNG
# - Fujifilm: .RAF
# - Olympus: .ORF
# - Panasonic: .RW2
# - Pentax: .PEF
# - Leica: .DNG, .RWL
# - Phase One: .IIQ
# - Mamiya: .MEF

# ===== HARDWARE REQUERIDO =====
# Mínimo con soporte RAW:
# - GPU: RTX 3050 6GB (RTX 3060 8GB+ recomendado)
# - RAM: 24GB (32GB recomendado para procesamiento RAW intensivo)
# - Storage: 100GB libres (archivos RAW son grandes: 25-50MB cada uno)
# - CPU: Intel i5-8400 / AMD Ryzen 5 2600 o superior
# - SSD recomendado para mejor rendimiento con archivos RAW

# ===== NOTAS DE RENDIMIENTO RAW =====
# - Conversión RAW a JPEG: ~2-5 segundos por imagen (depende de CPU)
# - Memoria adicional requerida: ~2-4GB RAM para archivos RAW grandes
# - Espacio temporal: ~100MB por imagen durante procesamiento
# - Soporte nativo para balance de blancos de cámara
# - Configuración optimizada para retratos profesionales

# ===== SOLUCIÓN DE PROBLEMAS RAW =====
# Windows - Si rawpy falla:
# 1. Instalar Visual C++ Redistributable
# 2. Alternativa: conda install rawpy -c conda-forge
# 3. Verificar espacio en disco C:\\ para cache temporal
#
# macOS - Si rawpy falla:
# 1. Instalar Xcode Command Line Tools: xcode-select --install
# 2. Si hay problemas: brew install libraw
# 3. Para M1/M2: conda install rawpy -c conda-forge
#
# Linux - Si rawpy falla:
# 1. Ubuntu/Debian: sudo apt install libraw-dev build-essential
# 2. CentOS/RHEL: sudo yum install libraw-devel gcc-c++
# 3. Arch: sudo pacman -S libraw gcc

# ===== TESTED CONFIGURATIONS =====
# ✅ Windows 10/11 + Python 3.10 + rawpy 0.18.1
# ✅ Ubuntu 22.04 + Python 3.10 + rawpy 0.18.1  
# ✅ macOS 12+ + Python 3.10 + rawpy 0.18.1
# ✅ Nikon D850 .NEF files (45MP)
# ✅ Canon R5 .CR3 files (45MP)
# ✅ Sony A7IV .ARW files (33MP)
# ✅ Adobe .DNG files
# ✅ Fujifilm .RAF files
# ✅ RTX 3050 6GB / RTX 3060 8GB / RTX 4060 8GB

# ===== CHANGELOG SOPORTE RAW =====
# v2.1 - Agregado soporte completo para archivos RAW
# - Fix: Eliminado bug de detección duplicada de archivos .NEF
# - Nuevo: Soporte para 8+ formatos RAW principales
# - Nuevo: Conversión automática RAW->JPEG para procesamiento
# - Nuevo: Preservación de metadata EXIF de archivos RAW
# - Nuevo: Configuración optimizada para retratos profesionales
# - Nuevo: Limpieza automática de archivos temporales
# - Mejorado: Detección de archivos sin case-sensitivity issues